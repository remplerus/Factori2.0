plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
}

version = createVersion()
group = modgroupid

base {
    archivesName = modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.modid
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.modid
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://maven.tterrag.com"
    }
    maven {
        url "https://maven.shedaniel.me"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:"+mc_version.substring(2)+".${neo_version}"

    //rei
    compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
    runtimeOnly "dev.architectury:architectury-neoforge:${architectury_version}"
    runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"

    //enderio
    //compileOnly "com.tterrag.registrate:Registrate:MC${registrate_version}"
    //compileOnly "dev.gigaherz.graph:GraphLib3:3.0.4"
    //implementation "curse.maven:enderio-64578:${enderio_version}"

    //kubejs
    //implementation "dev.latvian.mods:kubejs-forge:${kubejs_version}"
    //runtimeOnly "dev.latvian.mods:rhino-forge:${rhino_version}"
    //runtimeOnly "dev.architectury:architectury-forge:${architectury_version}"

    //crafttweaker
    compileOnly "com.blamejared.crafttweaker:CraftTweaker-neoforge-${mc_version}:${crafttweaker_version}"
    runtimeOnly "com.blamejared.crafttweaker:CraftTweaker-neoforge-${mc_version}:${crafttweaker_version}"

    //annotations
    //annotationProcessor 'com.blamejared.crafttweaker:Crafttweaker_Annotation_Processors:3.0.0.16'
    //annotationProcessor "net.neoforged:neoforged:"+mc_version.substring(2)+".${neo_version}"
    //annotationProcessor "com.blamejared.crafttweaker:CraftTweaker-neoforge-${mc_version}:${crafttweaker_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : mc_version, minecraft_version_range: mc_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : modid, mod_name: modname, mod_license: modlicense, mod_version: version,
            mod_authors         : modauthors, mod_description: moddescription, rei_range: rei_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

compileJava {
    options.compilerArgs << ("-Acrafttweaker.processor.document.output_directory=${file('src/generated/ctDocs')}" as String)
}

String createVersion() {
    def thisVersion = project.getProperty("mc_version").substring(2) + "." + project.getProperty("version")
    return thisVersion
}
